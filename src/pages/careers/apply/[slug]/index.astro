---
import Layout from "../../../../layouts/BaseLayout.astro";
import { getJobs, type Job } from "../../../../lib/jobs";
import { getCountryList } from "../../../../lib/getCountryData";
import type { Country } from "../../../../lib/getCountryData";
import { createApplication } from "../../../../lib/airtable";
import { uploadResumeToFileIO } from "../../../../lib/uploadResumeToFileIO"; // assumes this exists

export async function getStaticPaths() {
  const jobs = await getJobs();
  return jobs.map((job) => ({
    params: { slug: job.slug },
    props: { job },
  }));
}

const { job } = Astro.props as { job: Job };
const countryCodes: Country[] = (await getCountryList()).sort((a, b) =>
  a.name.localeCompare(b.name)
);

// SERVER: Handle form POST
if (Astro.request.method === "POST") {
  try {
    const formData = await Astro.request.formData();

    const firstName = formData.get("firstName")?.toString() || "";
    const lastName = formData.get("lastName")?.toString() || "";
    const name = `${firstName} ${lastName}`.trim();
    const email = formData.get("email")?.toString() || "";
    const phone = formData.get("phone")?.toString() || "";
    const countryCode = formData.get("countryCode")?.toString() || "";
    const gender = formData.get("gender")?.toString() || "";
    const nationality = formData.get("nationality")?.toString() || "";
    const dob = formData.get("dob")?.toString() || "";
    const visa = formData.get("visa")?.toString() || "";
    const experience = formData.get("experience")?.toString() || "";
    const linkedin = formData.get("linkedin")?.toString() || "";
    const about = formData.get("about")?.toString() || "";
    const jobSlug = Astro.params.slug;
    const resumeFile = formData.get("resume") as File;

    let resumeUrl = "";
    if (resumeFile && resumeFile.size > 0) {
      resumeUrl = await uploadResumeToFileIO(resumeFile);
    }

    await createApplication({
      Name: name,
      Email: email,
      Country: `${countryCode} ${phone}`,
      JobSlug: jobSlug,
      ResumeUrl: resumeUrl,
      Gender: gender,
      Nationality: nationality,
      DOB: dob,
      VisaStatus: visa,
      Experience: experience,
      LinkedIn: linkedin,
      About: about,
    });

    return Astro.redirect(`/careers/apply/${jobSlug}/confirmation`);
  } catch (err) {
    console.error("Submission failed:", err);
    return new Response("Submission failed", { status: 500 });
  }
}
---

<Layout
  title={`Apply | ${job.title} | GC International`}
  description={`Apply for ${job.title} at GC International.`}
  ogTitle={`Apply | ${job.title}`}
  ogDescription={`Apply for ${job.title} at GC International.`}
  ogUrl={Astro.url.href}
>
  <section class="pt-32 pb-12 px-4 max-w-3xl mx-auto">
    <h1 class="text-3xl font-bold mb-4">Apply for {job.title}</h1>

    <form
      method="POST"
      enctype="multipart/form-data"
      class="space-y-6"
    >
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div class="grid gap-1">
          <label for="firstName">First Name *</label>
          <input id="firstName" name="firstName" placeholder="First Name" required class="border px-4 py-2 rounded" />
        </div>
        <div class="grid gap-1">
          <label for="lastName">Last Name *</label>
          <input id="lastName" name="lastName" placeholder="Last Name" required class="border px-4 py-2 rounded" />
        </div>
        <div class="grid gap-1 md:col-span-2">
          <label for="email">Email *</label>
          <input id="email" name="email" type="email" placeholder="Email" required class="border px-4 py-2 rounded" />
        </div>

        <div class="grid gap-1">
          <label for="countryCode">Country Code *</label>
        <select id="countryCode" name="countryCode" required class="border px-3 py-2 rounded">
          <option value="" disabled selected>-- Select your country code --</option>
          {countryCodes.map((country: Country) => (
            <option value={country.dial_code}>
              {country.name} {country.flag} ({country.code}) {country.dial_code}
            </option>
          ))}
        </select>
        </div>

        <div class="grid gap-1">
          <label for="phone">Phone *</label>
        <input id="phone" name="phone" placeholder="Phone" required class="border px-4 py-2 rounded" />
        </div>

        <div>
          <label class="block font-medium mb-1" for="gender-male">Gender *</label>
          <div class="flex gap-4">
            <label><input id="gender-male" type="radio" name="gender" value="Male" required /> Male</label>
            <label><input id="gender-female" type="radio" name="gender" value="Female" required /> Female</label>
          </div>
        </div>

        <div class="grid gap-1">
          <label for="nationality">Nationality *</label>
        <input id="nationality" name="nationality" placeholder="Nationality" required class="border px-4 py-2 rounded" />
        </div>
        <div class="grid gap-1">
          <label for="dob">Date of Birth *</label>
        <input id="dob" name="dob" type="date" required class="border px-4 py-2 rounded" />
        </div>

        <div class="grid gap-1">
          <label for="visa">Visa Status *</label>
        <select id="visa" name="visa" required class="border px-4 py-2 rounded">
          <option value="">-- Visa Status --</option>
          <option value="Visit">Visit</option>
          <option value="Work">Work</option>
          <option value="Student">Student</option>
          <option value="Golden">Golden</option>
          <option value="Resident">Resident</option>
          <option value="None">None</option>
        </select>
        </div>

        <div class="grid gap-1">
          <label for="experience">Years of Experience *</label>
        <input id="experience" name="experience" type="number" min="0" placeholder="Years of Experience" required class="border px-4 py-2 rounded" />
        </div>
        <div class="grid gap-1 md:col-span-2">
          <label for="linkedin">LinkedIn (optional)</label>
        <input id="linkedin" name="linkedin" placeholder="LinkedIn (optional)" class="border px-4 py-2 rounded" />
        </div>

        <div class="md:col-span-2">
          <label for="about" class="block font-medium mb-1">Tell us about yourself (optional)</label>
          <textarea
            id="about"
            name="about"
            rows="4"
            maxlength="500"
            placeholder="Max 500 characters..."
            class="border px-4 py-2 rounded w-full"
          ></textarea>
          <div class="text-sm text-gray-500 text-right mt-1">
            <span id="charCount">0</span>/500
          </div>
        </div>

        <div class="md:col-span-2">
          <label for="resumeInput" class="block font-medium mb-2">Resume (under 1 MB only) *</label>
          <input
            id="resumeInput"
            name="resume"
            type="file"
            accept="application/pdf"
            required
            class="block w-full text-sm text-gray-700 file:mr-4 file:py-2 file:px-4 file:rounded file:border-0 file:text-sm file:font-semibold file:bg-[#dfdfdf] file:text-black hover:file:bg-red-600"
          />
        </div>
      </div>

      <div class="pt-6 flex justify-between">
        <a href={`/careers/${job.slug}`} class="bg-[#ed1c24] hover:bg-red-600 text-white px-6 py-2 rounded text-sm font-medium">
          Back to Job
        </a>
        <button type="submit" class="bg-[#0054a4] hover:bg-blue-700 text-white px-6 py-2 rounded text-sm font-medium">
          Submit Application
        </button>
      </div>
    </form>
  </section>

  <script>
    document.addEventListener("DOMContentLoaded", function () {
      const aboutTextarea = document.getElementById("about");
      const charCountDisplay = document.getElementById("charCount");

      if (aboutTextarea && charCountDisplay) {
        charCountDisplay.textContent = String((aboutTextarea as HTMLTextAreaElement).value.length);
        aboutTextarea.addEventListener("input", function () {
          charCountDisplay.textContent = String((aboutTextarea as HTMLTextAreaElement).value.length);
        });
      }

      document.addEventListener("submit", function (e) {
        const form = e.target;
        if (!(form instanceof HTMLFormElement)) return;

        const fileInput = form.querySelector("#resumeInput");
        if (!(fileInput instanceof HTMLInputElement)) return;

        const file = fileInput.files?.[0];
        if (file && file.size > 1048576) {
          e.preventDefault();
          alert("Resume must be under 1 MB.");
        }
      });
    });
  </script>
</Layout>
